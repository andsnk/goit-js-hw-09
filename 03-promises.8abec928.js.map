{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAqBb,MAAMQ,EAAOC,SAASC,cAAc,SACpCF,EAAKG,iBAAiB,UAAUC,IAC9BA,EAAMC,iBACN,MAAMC,EAAaC,OAAOP,EAAKQ,SAAShB,MAAMiB,OACxCC,EAAYH,OAAOP,EAAKQ,SAASG,KAAKF,OACtCG,EAASL,OAAOP,EAAKQ,SAASI,OAAOH,OAEvCH,EAAa,GAAKI,EAAY,GAAKE,GAAU,EAC/CC,EAAAzB,GAAS0B,OAAOC,QACd,kGA1BN,SAAwBT,EAAYI,EAAWE,GAC7C,IAAK,IAAII,EAAI,EAAGA,GAAKJ,EAAQI,GAAK,EAEhC1B,EAAc0B,EADAV,GAAcU,EAAI,GAAKN,GAElCO,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBqB,EAAAzB,GAAS0B,OAAOI,QACd,uBAAqB3B,QAAiBC,MAAU,IAGnD2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBqB,EAAAzB,GAAS0B,OAAOM,QACd,sBAAoB7B,QAAeC,MAAU,G,CAmBrD6B,CAAef,EAAYI,EAAWE,EAAO,IAG7BX,SAASC,cAAc,sBAC/BC,iBAAiB,SAASC,IAClCJ,EAAKsB,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction outputPromises(firstDelay, delayStep, amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    const delay = firstDelay + (i - 1) * delayStep;\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const firstDelay = Number(form.elements.delay.value);\n  const delayStep = Number(form.elements.step.value);\n  const amount = Number(form.elements.amount.value);\n\n  if (firstDelay < 0 || delayStep < 0 || amount <= 0) {\n    Notiflix.Notify.warning(\n      'Please enter a value not less than 0 for first delay, delay step and greater than 0 for amount'\n    );\n    return;\n  }\n  outputPromises(firstDelay, delayStep, amount);\n});\n\nconst clearForm = document.querySelector('.promise-clear-btn');\nclearForm.addEventListener('click', event => {\n  form.reset();\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$form","document","querySelector","addEventListener","event","preventDefault","firstDelay","Number","elements","value","delayStep","step","amount","$parcel$interopDefault","Notify","warning","i","then","success","catch","failure","$47d4ff9957288465$var$outputPromises","reset"],"version":3,"file":"03-promises.8abec928.js.map"}